# -*- coding: utf-8 -*-
"""Image Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1atzSB5oaRxJni7oBnCs65s394KnPNQwU

**Image Identification using Neural Network**
"""

# pip install numpy tensorflow matplotlib opencv-python

import numpy as np
from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt
import cv2 as cv

(training_images, training_labels), (testing_images, testing_labels) = datasets.cifar10.load_data()

training_images, testing_images = training_images / 255, testing_images / 255

class_names = ['Plane', 'Car', 'Bird', 'Cat', 'Deer', 'Dog', 'Frog', 'Horse', 'Ship', 'Truck']

# for i in range(10):
#     plt.subplot(4, 4, i + 1)
#     plt.xticks([])
#     plt.yticks([])
#     plt.imshow(training_images[i], cmap=plt.cm.binary)
#     plt.xlabel(class_names[training_labels[i][0]])
# plt.show()

training_images = training_images[:20000]
training_labels = training_labels[:20000]
testing_images = testing_images[:4000]
testing_labels = testing_labels[:4000]

model = models.Sequential()

model.add(layers.Input(shape=(32, 32, 3)))
model.add(layers.Conv2D(32, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D(pool_size=(2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D(pool_size=(2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.Flatten())
model.add(layers.Dense(64, activation='relu'))
model.add(layers.Dense(10, activation='softmax'))

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

model.fit(training_images, training_labels, epochs=10, validation_data=(testing_images, testing_labels))

loss, accuracy = model.evaluate(testing_images, testing_labels)
print(f'Loss: {loss}')
print(f'Accuracy: {accuracy}')

model.save('image_classifier.keras')

model = models.load_model('image_classifier.keras')

model.summary()

img = cv.imread('bird_resize.jpg')
img = cv.cvtColor(img, cv.COLOR_BGR2RGB)
plt.imshow(img)
plt.show()

prediction = model.predict(np.array([img]) / 255)
print(f'Prediction: {class_names[np.argmax(prediction)]}')

img = cv.imread('car_resize.jpg')
img = cv.cvtColor(img, cv.COLOR_BGR2RGB)
plt.imshow(img)
plt.show()

prediction = model.predict(np.array([img]) / 255)
print(f'Prediction: {class_names[np.argmax(prediction)]}')

img = cv.imread('dog_resize.jpg')
img = cv.cvtColor(img, cv.COLOR_BGR2RGB)
plt.imshow(img)
plt.show()

prediction = model.predict(np.array([img]) / 255)
print(f'Prediction: {class_names[np.argmax(prediction)]}')

img = cv.imread('frog_resize.jpg')
img = cv.cvtColor(img, cv.COLOR_BGR2RGB)
plt.imshow(img)
plt.show()

prediction = model.predict(np.array([img]) / 255)
print(f'Prediction: {class_names[np.argmax(prediction)]}')

img = cv.imread('horse_resize.jpg')
img = cv.cvtColor(img, cv.COLOR_BGR2RGB)
plt.imshow(img)
plt.show()

prediction = model.predict(np.array([img]) / 255)
print(f'Prediction: {class_names[np.argmax(prediction)]}')

img = cv.imread('ship_resize.jpg')
img = cv.cvtColor(img, cv.COLOR_BGR2RGB)
plt.imshow(img)
plt.show()

prediction = model.predict(np.array([img]) / 255)
print(f'Prediction: {class_names[np.argmax(prediction)]}')

img = cv.imread('truck_resize.jpg')
img = cv.cvtColor(img, cv.COLOR_BGR2RGB)
plt.imshow(img)
plt.show()

prediction = model.predict(np.array([img]) / 255)
print(f'Prediction: {class_names[np.argmax(prediction)]}')

img = cv.imread('cat_resize.jpg')
img = cv.cvtColor(img, cv.COLOR_BGR2RGB)
plt.imshow(img)
plt.show()

prediction = model.predict(np.array([img]) / 255)
print(f'Prediction: {class_names[np.argmax(prediction)]}')

img = cv.imread('airplane_resize.jpg')
img = cv.cvtColor(img, cv.COLOR_BGR2RGB)
plt.imshow(img)
plt.show()

prediction = model.predict(np.array([img]) / 255)
print(f'Prediction: {class_names[np.argmax(prediction)]}')

img = cv.imread('deer_resize.jpg')
img = cv.cvtColor(img, cv.COLOR_BGR2RGB)
plt.imshow(img)
plt.show()

prediction = model.predict(np.array([img]) / 255)
print(f'Prediction: {class_names[np.argmax(prediction)]}')

"""**By Suryanarayan Panda**"""